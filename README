
br-pbuilder (Buildroot parallel builder)

================================================================================
Overview
================================================================================

This program is intended for being called inside Buildroot for executing
top-level parallel builds.

The task is accomplished using a graph organized in levels. Each node of the
graph represents a package to be built and each level contains all the nodes
(packages) whose dependencies are nodes of higher level.

The graph's root is a package that does not have any dependency on any package
and this is the first level. The second level contains packages whose only
dependency is the graph's root; the third level contains packages whose
dependencies are the packages in the second and first levels; and so on.

This example shows a graph organization. Level 1 is considered the highest level.
Node A is the graph's root, it doesn't have any dependency; therefore is level 1.
Nodes B and C depend only of node A; therefore are level 2.
Node D depends on nodes A and B; therefore is level 3, but also nodes E and F
are in the same level since their only dependency is node C that is level 2.
Node G depends on node D that is level 3 and node C that is level 2, since
node D is the lowest level, node G must be level 4.
Node H depends on nodes E and F that are level 3 and node C that is level 2,
since nodes E and F are the lowest level, node H must be level 4.


                     +----+
                     |    |
                     |  A |                              Level 1
                     |    |
                     +----+
                        |
          .----+--------+---------.
          |    |                  |
       +----+  |               +----+
       |    |  |               |    |
       |  B |  |               |  C |                    Level 2
       |    |  |               |    |
       +----+  |               +----+
          |    |                  |
          +----'  .------+--------+------+-----.
          |       |      |               |     |
       +----+     |   +----+          +----+   |
       |    |     |   |    |          |    |   |
       |  D |     |   |  E |          |  F |   |         Level 3
       |    |     |   |    |          |    |   |
       +----+     |   +----+          +----+   |
          |       |      |               |     |
          +-------'      '---------------+-----'
          |                              |
       +----+                         +----+
       |    |                         |    |
       |  G |                         |  H |             Level 4
       |    |                         |    |
       +----+                         +----+

This table summarizes the packages names, their levels and their dependencies
of the above example:

Package -> Level -> Dependencies
   A         1          None
   B         2          A
   C         2          A
   D         3          A, B
   E         3          C
   F         3          C
   G         4          C, D
   H         4          C, E, F

Each package may have one or more dependencies and all of them must be in higher
levels.

================================================================================
Performance
================================================================================

Buildroot uses make -jN (or the equivalent invocation for other build systems)
for building in parallel each single package, but each one of them is built
serially one after another. 

A top-level parallel build builds several packages at the same time
significantly reducing the overall building time taking care of the dependencies
between the packages.

Notice that building a package includes several steps such as its configuration,
compilation and installation, but normally only the compilation step is done in
parallel, all the other steps take place in a serial fashion. Therefore a
top-level parallel build takes special advantage when executing those steps at
the same time for different packages.

Buildroot offers this functionality as an experimental feature, but the manual
warns that it may not work in some scenarios and that has been the case before
writing this program.

br-pbuilder has been tested in top-level parallel builds of default
configurations (the *defconfigs in /configs) as well as custom configurations
with br2-external trees.

As the number of packages increase, as it normally happens with the custom
configurations, the building times show a greater time reduction with respect to
the default make and brmake.

The table below shows a comparison between br-pbuilder and Buildroot's brmake
when building randomly selected default configurations already provided by
Buildroot.
The Diff columns show the time it takes for br-pbuilder to build a given
configuration when compared to brmake.

                             |           Time (s)       |          Diff
.----------------------------+--------------------------+----------------------.
| Buildroot defconfig        | br-pbuilder |   brmake   |  Time (s)  |    %    |
|----------------------------+-------------+------------+------------+---------|
| avenger96                  | 1012.47     | 1095       | -82.5      | -7.54   |
| bananapi_m64               | 1029.86     | 1170       | -140.14    | -11.98  |
| bananapro                  | 904.11      | 1051       | -146.89    | -13.98  |
| beaglebone_qt5             | 1960.86     | 2198.5     | -237.64    | -10.81  |
| ci20                       | 779.42      | 806        | -26.58     | -3.30   |
| freescale_imx28evk         | 838.54      | 908        | -69.46     | -7.65   |
| imx23evk                   | 777.44      | 881.5      | -104.06    | -11.80  |
| imx6ulpico                 | 951.83      | 1041       | -89.17     | -8.57   |
| imx8mqevk                  | 1106.8      | 1195       | -88.2      | -7.38   |
| microchip_sam9x60ek_mmc    | 824.12      | 935        | -110.88    | -11.86  |
| microchip_sama7g5ek_mmc    | 815.85      | 894        | -78.15     | -8.74   |
| olimex_a64_olinuxino       | 1226.23     | 1345       | -118.77    | -8.83   |
| pine64                     | 1047.74     | 1143       | -95.26     | -8.33   |
| qemu_mips32r6el_malta      | 953.44      | 1111       | -157.56    | -14.18  |
| qemu_risc64_virt           | 964.61      | 1086       | -121.39    | -11.18  |
| qemu_xtensa_lx60           | 909.28      | 1028       | -118.72    | -11.55  |
| raspberrypi3_64            | 1215.94     | 1322       | -106.06    | -8.02   |
| raspberrypi4_64            | 1251.83     | 1349       | -97.17     | -7.20   |
| uevm5432                   | 958.93      | 1032       | -73.07     | -7.08   |
| warpboard                  | 820.51      | 944        | -123.49    | -13.08  |
| zynq_zc706                 | 867.18      | 921        | -53.82     | -5.84   |
|----------------------------+-------------+------------+------------+=========|
| Average time saving in percentage                                  | -9.47   |
'--------------------------------------------------------------------+========='

The table below shows again a comparison between br-pbuilder and Buildroot's
brmake when building a custom configuration with +200 packages, many of them
in a br2-external tree. It was repeated several times just to have an idea of
the building process releability.

                                |         Time (s)        |         Diff
.-------------------------------+-------------------------+--------------------.
| Custom defconfig              | br-pbuilder |  brmake   | Time (s)  |   %    |
|-------------------------------+-------------+-----------+-----------+--------|
| Custom w/ br2-external tree   | 1241        | 1868.66   | -627.66   | -35.58 |
'---------------------------------------------------------------------+========'

As with all comparisons of this type, it must be taken with a grain of salt.
Interested people should execute it in their own hardware with their own
configuration to verify its real performance.

This configurations were built using an AMD Ryzen 7 5700U with 16 GB of RAM
under Linux Mint 21 x86_64.

================================================================================
Requirements
================================================================================

br-pbuilder are a C program, a Python script and standard 'make' files for
building the C program.
All its requirements are also mandatory for Buildroot, except the following two
packages that are optional for Buildroot:

- glib2
- python (version 3)

================================================================================
How to use it
================================================================================

This program should be invoked as a target from Buildroot's Makefile, therefore
the main Makefile and some scripts need to be patched.

1. Download the parallel builder.

2. Patch Buildroot:

$ cd br-pbuilder
$ ./scripts/install.sh -b <buildroot_path>

where <buildroot_path> is the path to Buildroot's top directory.
This script creates symlinks inside the Buildroot sources and patches its main
Makefile and some scripts like br2-external, so when invoking this new target
it knows what to do.

4. Configure Buildroot:

The Buildroot configuration remains exactly the same, nothing has been touched
here. Use any of the configuration methods such as 'make <defconfig>' or just
something like 'make menuconfig'.

5. Execute the parallel builder:

From Buildroot's build path invoke the parallel builder:

$ make pbuilder

At this point the output of the main building steps of each package are
displayed organized by priority along with the total building time of each
package and at the end the total building time of the whole configuration.
The complete output of each package and its errors, if any, can be found in
pbuilder_logs/<package>.log inside Buildroot's build path.

The 'pbuilder' target executes first the python script that checks that the 
binary and the dependencies file exist. If the binary is missing, it builds it
using the host's make tools and gcc. If the dependencies files is missing, it
creates it using the Makefile's 'show-info' target.

In order to increase the verbosity during the br-pbuilder execution, add the
-l N cmdline arg in the Makefile target where it's invoked. N is the debug level
that can be [1-3].

================================================================================
Project current status
================================================================================

As of today, this is just a proof of concept and is not part of the official
Buildroot project.

This is a small and simple program that at least seems to work with several
built-in defconfigs and projects with a br2-external tree.

It still needs lots of testing and it may not work in some cases or could break
some Buildroot's rules/guidelines.

Any help and bug fixes are welcome!

